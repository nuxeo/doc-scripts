#!/bin/bash

# Env vars:
#  SYNC_ONLY to only sync
#  NO_SYNC to not do the sync

REMOTEHOST=nuxeo@lethe.nuxeo.com
REMOTEPATH=/opt/doc/api

HERE=$(cd $(dirname $0); pwd -P)
TLDJAR=$HERE/vdldoc-2.0.jar
SIMPLIFYJAVADOC=$HERE/simplifyjavadoc.py

BRANCH=${1:-5.5}
VERSION=${2:-$BRANCH}
SRC=$HERE/src
[ -d "$SRC" ] || mkdir -p "$SRC"
SCM_REPO=git://github.com/nuxeo/nuxeo.git

LOCAL_REPO="$SRC/nuxeo-$VERSION"
LOCAL_DOC="$SRC/nuxeo-$VERSION-javadoc"
LOCAL_TLDDOC="$SRC/nuxeo-$VERSION-tlddoc"

umask 022

clone() {

    if [ ! -d "$LOCAL_REPO" ]; then
        echo "##### Cloning nuxeo: $SCM_REPO into $LOCAL_REPO ..."
        git clone $SCM_REPO "$LOCAL_REPO" || exit 1
    fi
    (cd "$LOCAL_REPO" && git checkout $BRANCH) || exit 1
    (cd "$LOCAL_REPO" && python clone.py) || exit 1

}

keep_old_javadoc() {
    # Keep old files if unchanged, to help caches and crawlers
    OLD="$1"
    NEW="$2"
    [ ! -d $OLD ] && return
    diff -q -s -r -I '<!-- Generated by javadoc' "$OLD" "$NEW" | \
      sed -ne 's/^Files \(.*\) and \(.*\) are identical$/\1 \2/p' | \
      xargs -n 2 cp -p
}

swap_doc() {
    DOCDST="$1"
    DOCTMP="$2"
    rm -rf "$DOCDST.old" || true
    mv "$DOCDST" "$DOCDST.old" || true
    mv "$DOCTMP" "$DOCDST"
}

build_javadoc() {
    DOCTMP="$1"/target/site/apidocs
    DOCDST="$2"
    cd "$1"
    mvn javadoc:aggregate -Pjavadoc,addons,distrib,-qa || exit 1
    [ ! -d "$DOCTMP" ] && return
    build_simplified_javadoc "$DOCTMP"
    keep_old_javadoc "$DOCDST" "$DOCTMP"
    swap_doc "$DOCDST" "$DOCTMP"
}

build_simplified_javadoc() {
    cd "$1"
    find . -name '*.html' -exec "$SIMPLIFYJAVADOC" '{}' +
}

push_doc() {
    [ -z "$1" ] && return
    [ -z "$2" ] && return
    [ -n "$NO_SYNC" ] && return
    echo "##### running rsync in background"
    ssh $REMOTEHOST mkdir -p $REMOTEPATH/$2
    rsync -z -e ssh -r --delete "$1"/* $REMOTEHOST:$REMOTEPATH/$2 &
}

keep_old_doc() {
    # Keep old files if unchanged, to help caches and crawlers
    OLD="$1"
    NEW="$2"
    [ ! -d $OLD ] && return
    diff -q -s -r "$OLD" "$NEW" | \
      sed -ne 's/^Files \(.*\) and \(.*\) are identical$/\1 \2/p' | \
      xargs -n 2 cp -p
}

build_tlddoc() {
    DOCTMP="$1"/target/site/tlddoc
    DOCDST="$2"
    DOCTITLE="Nuxeo VDL Generated Documentation"
    [ ! -e $TLDJAR ] && wget --no-check-certificate -O$TLDJAR "https://maven.nuxeo.org/nexus/service/local/artifact/maven/redirect?r=central&g=org.omnifaces&a=vdldoc&v=2.0&e=jar"
    cd "$1"
    # filter deprecated themes taglib, as well as error-web module "test" taglib
    find . -name "*.taglib.xml" | grep -v target | grep -v bin | grep -v "nxthemes.taglib.xml" | grep -v "error.taglib.xml" | xargs java -jar $TLDJAR -d $DOCTMP -windowtitle "$DOCTITLE" -doctitle "$DOCTITLE"
    [ ! -d "$DOCTMP" ] && return
    keep_old_doc "$DOCDST" "$DOCTMP"
    swap_doc "$DOCDST" "$DOCTMP"
}

update() {
    echo "######## nuxeo-$VERSION start generating doc"
    if [ -n "$SYNC_ONLY" ]; then
        push_doc "$LOCAL_DOC" nuxeo/$VERSION/javadoc
        [ -z "$LOCAL_TLDDOC" ] || push_doc "$LOCAL_TLDDOC" nuxeo/$VERSION/tlddoc
    else
        clone
        build_javadoc "$LOCAL_REPO" "$LOCAL_DOC" && push_doc "$LOCAL_DOC" nuxeo/$VERSION/javadoc
        [ -z "$LOCAL_TLDDOC" ] || \
            (build_tlddoc "$LOCAL_REPO" "$LOCAL_TLDDOC" && \
             push_doc "$LOCAL_TLDDOC" nuxeo/$VERSION/tlddoc)
    fi
    echo "######## nuxeo-$VERSION end"
}

update